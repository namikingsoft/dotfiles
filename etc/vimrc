" NeoBundle {
    " 初期化
    if has('vim_starting')
        set nocompatible " Viとの互換性なし
        set runtimepath+=~/.vim/bundle/neobundle.vim/
    endif
    call neobundle#rc(expand('~/.vim/bundle/'))
    " NeoBundle
    NeoBundleFetch 'Shougo/neobundle.vim'
    " vimproc (NeoBundle recommended)
    NeoBundle 'Shougo/vimproc.vim', {
    \ 'build' : {
    \     'windows' : 'tools\\update-dll-mingw',
    \     'cygwin' : 'make -f make_cygwin.mak',
    \     'mac' : 'make',
    \     'linux' : 'make',
    \     'unix' : 'gmake',
    \    },
    \ }
    " lightline
    NeoBundle 'itchyny/lightline.vim'
        let g:lightline = {
        \ 'colorscheme': 'default',
        \ 'component': {
        \   'readonly': '%{&readonly?"⭤":""}',
        \ },
        \ 'separator': { 'left': '⮀', 'right': '⮂' },
        \ 'subseparator': { 'left': '⮁', 'right': '⮃' }
        \ }
        " カラーテーマ上書き
        let s:p = {'normal': {}, 'inactive': {}, 'insert': {}, 'replace': {}, 'visual': {}, 'tabline': {}}
        let s:p.normal.left = [ ['darkestgreen', 'brightgreen', 'bold'], ['white', 'gray4'] ]
        let s:p.normal.right = [ ['gray5', 'gray10'], ['gray9', 'gray4'], ['gray8', 'gray2'] ]
        let s:p.inactive.right = [ ['gray1', 'gray5'], ['gray4', 'gray1'], ['gray4', 'gray0'] ]
        let s:p.inactive.left = s:p.inactive.right[1:]
        let s:p.insert.left = [ ['darkestcyan', 'white', 'bold'], ['white', 'darkblue'] ]
        let s:p.insert.right = [ [ 'darkestcyan', 'mediumcyan' ], [ 'mediumcyan', 'darkblue' ], [ 'mediumcyan', 'darkestblue' ] ]
        let s:p.replace.left = [ ['white', 'brightred', 'bold'], ['white', 'gray4'] ]
        let s:p.visual.left = [ ['darkred', 'brightorange', 'bold'], ['white', 'gray4'] ]
        let s:p.normal.middle = [ [ 'gray7', 'gray2' ] ]
        let s:p.insert.middle = [ [ 'mediumcyan', 'darkestblue' ] ]
        let s:p.replace.middle = s:p.normal.middle
        let s:p.replace.right = s:p.normal.right
        let s:p.tabline.left = [ [ '#993300', '#f5a533' ] ]
        let s:p.tabline.tabsel = [ [ '#663300', '#fdf6e3' ] ]
        let s:p.tabline.middle = [ [ '#93a1a1', '#303030' ] ]
        let s:p.tabline.right = [ [ '#663300', '#fdf6e3' ] ]
        let s:p.normal.error = [ [ 'gray9', 'brightestred' ] ]
        let s:p.normal.warning = [ [ 'gray1', 'yellow' ] ]
        let g:lightline#colorscheme#powerline#palette = lightline#colorscheme#fill(s:p)
    " Vim-Session
    NeoBundle 'xolox/vim-session', {
        \ 'depends' : 'xolox/vim-misc',
        \ }
        " セッションディレクトリがなければ保存しない
        let g:session_autosave = 'no'
        let g:session_autoload = 'no'
        let g:session_autosave_periodic = 0
        let g:session_lock_enabled = 0
        " 現在のディレクトリ直下の .vimsessions/ を取得
        let s:local_session_directory = xolox#misc#path#merge(getcwd(), '.vimsessions')
        let g:session_directory = s:local_session_directory
        " 存在すれば
        if isdirectory(s:local_session_directory)
            " vimを辞める時に自動保存
            let g:session_autosave = 'yes'
            " 引数なしでvimを起動した時にsession保存ディレクトリのdefault.vimを開く
            let g:session_autoload = 'yes'
            " 1分間に1回自動保存
            let g:session_autosave_periodic = 1
        endif
        unlet s:local_session_directory
    " Vdebug
    NeoBundle 'joonty/vdebug'
    " smooth-scroll
    NeoBundle 'yonchu/accelerated-smooth-scroll'
        " エイリアス
        nmap <silent> <C-s> <Plug>(ac-smooth-scroll-c-d)
        nmap <silent> <C-a> <Plug>(ac-smooth-scroll-c-u)
    " Emmet
    NeoBundle 'mattn/emmet-vim'
    " unite-outline
    NeoBundle 'Shougo/unite.vim'
    NeoBundle 'Shougo/unite-outline'
        let g:unite_split_rule = 'botright'
        noremap <Space>o <ESC>:Unite -vertical -winwidth=40 outline<Return>
    " Ag
    NeoBundle 'rking/ag.vim'
    " fugitive (git)
    NeoBundle 'tpope/vim-fugitive'
    " Markdown
    NeoBundle 'plasticboy/vim-markdown'
    NeoBundle 'kannokanno/previm'
    NeoBundle 'tyru/open-browser.vim'
        " 折りたたみ設定
        let g:vim_markdown_folding_disabled=1
        let g:vim_markdown_initial_foldlevel=3
        " md as markdown, instead of modula2
        au BufNewFile,BufRead *.{md,mdwn,mkd,mkdn,mark*} set filetype=markdown
        au BufNewFile,BufReadPost *.{md,mdwn,mkd,mkdn,mark*} setl tabstop=2 shiftwidth=2 expandtab
        " Disable highlight italic in Markdown
        autocmd FileType markdown hi! def link markdownItalic LineNr
    " PlantUML
    "NeoBundle 'aklt/plantuml-syntax'
    NeoBundle 'namikingsoft/plantuml-syntax'
        au BufNewFile,BufReadPost *.{pu,puml} setl tabstop=2 shiftwidth=2 expandtab
    " Qfreplace
    NeoBundle 'thinca/vim-qfreplace'
    " ctrlp
    NeoBundle 'kien/ctrlp.vim'
      set wildignore+=*/tmp/*,*.so,*.swp,*.zip,*.jpg,*.png,*.gif
      let g:ctrlp_custom_ignore = '\v[\/](node_modules|build)$'
    " Ruby
    "NeoBundle 'tpope/vim-rails'
        au BufRead,BufNewFile {Gemfile,Guardfile,Vagrantfile}          set filetype=ruby
        au BufNewFile,BufReadPost {Gemfile,Guardfile,Vagrantfile}   setl tabstop=2 shiftwidth=2 expandtab
        au BufNewFile,BufReadPost *.rb setl tabstop=2 shiftwidth=2 expandtab
    " Scala
    NeoBundle 'derekwyatt/vim-scala'
        au BufNewFile,BufRead *.scala setf scala
        au BufNewFile,BufReadPost *.scala setl tabstop=2 shiftwidth=2 expandtab
    " Haskell
    " NeoBundle 'neovimhaskell/haskell-vim'
    " NeoBundle 'travitch/hasksyn'
    " NeoBundle 'itchyny/vim-haskell-indent'
    NeoBundle 'dag/vim2hs'
    " Golang
    " NeoBundle 'fatih/vim-go'
    " Rust
    NeoBundle 'rust-lang/rust.vim'
    " JavaScript
    " NeoBundle "othree/yajs.vim"
    " NeoBundle "othree/es.next.syntax.vim"
    " NeoBundle "mxw/vim-jsx"
    NeoBundle "namikingsoft/ts4js-vim"
    NeoBundle 'elzr/vim-json'
        au BufNewFile,BufReadPost *.{js,jsx,json,es6} setl tabstop=2 shiftwidth=2 expandtab
    " TypeScript
    NeoBundle 'https://github.com/leafgarland/typescript-vim.git'
        au BufNewFile,BufReadPost *.{ts,tsx} setl tabstop=2 shiftwidth=2 expandtab
    " Coffee-Script
    NeoBundle 'kchmck/vim-coffee-script'
    NeoBundle 'mtscout6/vim-cjsx'
        au BufRead,BufNewFile *.{coffee,cjsx}            set filetype=coffee
        au BufNewFile,BufReadPost *.{coffee,cjsx} setl tabstop=2 shiftwidth=2 expandtab
    " Jade
    NeoBundle 'digitaltoad/vim-jade'
        au BufRead,BufNewFile *.jade            set filetype=jade
        au BufNewFile,BufReadPost *.jade setl tabstop=2 shiftwidth=2 expandtab
    " Ace
    NeoBundle 'yosssi/vim-ace'
        au BufNewFile,BufReadPost *.ace setl tabstop=2 shiftwidth=2 expandtab
    " Slim
    NeoBundle 'slim-template/vim-slim'
        au BufNewFile,BufReadPost *.slim setl tabstop=2 shiftwidth=2 expandtab
    " Yaml
    NeoBundle 'roalddevries/yaml.vim'
        au BufRead,BufNewFile *.{yml,yaml}         set filetype=yaml
        au BufNewFile,BufReadPost *.{yml,yaml} setl tabstop=2 shiftwidth=2 expandtab
    " XML
        au BufNewFile,BufReadPost *.xml setl tabstop=2 shiftwidth=2 expandtab
    " Twig
    NeoBundle 'evidens/vim-twig'
        au BufNewFile,BufReadPost *.twig setl tabstop=2 shiftwidth=2 expandtab
    " Feature
    NeoBundle 'tpope/vim-cucumber'
        au BufNewFile,BufReadPost *.feature setl tabstop=2 shiftwidth=2 expandtab
    " HTML5
    NeoBundle 'othree/html5.vim'
        au BufNewFile,BufReadPost *.html setl tabstop=2 shiftwidth=2 expandtab
    " Shell
    au BufNewFile,BufReadPost *.sh setl tabstop=2 shiftwidth=2 expandtab
    " Sass/Scss
    NeoBundle 'cakebaker/scss-syntax.vim'
    au BufRead,BufNewFile *.{sass,scss,pcss,css} set filetype=scss.css
    au BufNewFile,BufReadPost *.{sass,scss,pcss,css} setl tabstop=2 shiftwidth=2 expandtab
    " less
    NeoBundle 'groenewege/vim-less'
        au BufNewFile,BufReadPost *.less setl tabstop=2 shiftwidth=2 expandtab
    " Stylus
    NeoBundle 'wavded/vim-stylus'
        au BufNewFile,BufReadPost *.styl setl tabstop=2 shiftwidth=2 expandtab
    " Dockerfile
    NeoBundle 'ekalinin/Dockerfile.vim'
    " Terraform
    NeoBundle 'hashivim/vim-terraform'
    " vim-indent-guides
    NeoBundle 'nathanaelkane/vim-indent-guides'
        let g:indent_guides_auto_colors=0
        autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd   ctermbg=236
        autocmd VimEnter,Colorscheme * :hi IndentGuidesEven  ctermbg=234
        let g:indent_guides_enable_on_vim_startup=1
        let g:indent_guides_guide_size=1
    " nerdtree
    NeoBundle 'scrooloose/nerdtree'
        nmap <silent> <C-e>      :NERDTreeToggle<CR>
        vmap <silent> <C-e> <Esc>:NERDTreeToggle<CR>
        omap <silent> <C-e>      :NERDTreeToggle<CR>
        imap <silent> <C-e> <Esc>:NERDTreeToggle<CR>
        cmap <silent> <C-e> <C-u>:NERDTreeToggle<CR>
        "autocmd vimenter * if !argc() | NERDTree | endif "起動時にNerdTreeを開く
        autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | endif
        let g:NERDTreeIgnore=['\.clean$', '\.swp$', '\.bak$', '\~$']
        let g:NERDTreeShowHidden=1
        let g:NERDTreeQuitOnOpen=1
        let g:NERDTreeMinimalUI=1
        let g:NERDTreeDirArrows=0
        let g:NERDTreeMouseMode=2
    " neocompicache
    NeoBundle 'Shougo/neocomplcache.vim'
        " Disable AutoComplPop.
        let g:acp_enableAtStartup = 0
        " Use neocomplcache.
        let g:neocomplcache_enable_at_startup = 1
        " Use smartcase.
        let g:neocomplcache_enable_smart_case = 1
        " Set minimum syntax keyword length.
        let g:neocomplcache_min_syntax_length = 3
        let g:neocomplcache_lock_buffer_name_pattern = '\*ku\*'
        " Define dictionary.
        let g:neocomplcache_dictionary_filetype_lists = {
            \ 'default' : ''
            \ }
        " Plugin key-mappings.
        inoremap <expr><C-g>     neocomplcache#undo_completion()
        inoremap <expr><C-l>     neocomplcache#complete_common_string()
        " Recommended key-mappings.
        " <CR>: close popup and save indent.
        inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
        function! s:my_cr_function()
          return neocomplcache#smart_close_popup() . "\<CR>"
        endfunction
        " <TAB>: completion.
        inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
        " <C-h>, <BS>: close popup and delete backword char.
        inoremap <expr><C-h> neocomplcache#smart_close_popup()."\<C-h>"
        inoremap <expr><BS> neocomplcache#smart_close_popup()."\<C-h>"
        inoremap <expr><C-y>  neocomplcache#close_popup()
        inoremap <expr><C-e>  neocomplcache#cancel_popup()
    " neosnippet
    NeoBundle 'Shougo/neosnippet'
        " Plugin key-mappings.
        imap <C-k>     <Plug>(neosnippet_expand_or_jump)
        smap <C-k>     <Plug>(neosnippet_expand_or_jump)
        xmap <C-k>     <Plug>(neosnippet_expand_target)
        " SuperTab like snippets behavior.
        imap <expr><TAB> neosnippet#expandable_or_jumpable() ?
        \ "\<Plug>(neosnippet_expand_or_jump)"
        \: pumvisible() ? "\<C-n>" : "\<TAB>"
        smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
        \ "\<Plug>(neosnippet_expand_or_jump)"
        \: "\<TAB>"
        " For snippet_complete marker.
        if has('conceal')
          set conceallevel=2 concealcursor=i
        endif
    " Syntastic
    NeoBundle 'scrooloose/syntastic.git'
        set statusline+=%#warningmsg#
        set statusline+=%{SyntasticStatuslineFlag()}
        set statusline+=%*
        let g:syntastic_always_populate_loc_list = 1
        let g:syntastic_auto_loc_list = 1
        let g:syntastic_check_on_open = 0
        let g:syntastic_check_on_wq = 0
        let g:syntastic_javascript_checkers = ['flow', 'eslint']
    " Default Snippets
    NeoBundle 'Shougo/neosnippet-snippets'

    " ファイルタイプ有効化
    filetype plugin indent on
    " バンドルチェック
    NeoBundleCheck
" }

" キーバインド {
    " 設定ファイル編集(Space + .)
    nnoremap <Space>. :<C-u>tabedit $MYVIMRC<CR>
    " 設定ファイル適用(Space + r)
    nnoremap <Space>r :<C-u>source $MYVIMRC \| if has('gui_running') \| source $MYGVIMRC \| endif <CR>
    " Esc代替(Ctrl + c)
    inoremap <C-c> <Esc>
    "カーソルを表示行で移動する。物理行移動は<C-n>,<C-p>
    nnoremap j gj
    nnoremap k gk
    nnoremap <Down> gj
    nnoremap <Up>   gk
" }

" 基本設定 {
    " カーソル設定
    set cursorline
    set nocursorcolumn
    " ステータスタブラインを常に表示
    set laststatus=2
    set showtabline=2
    " バックアップ/スワップファイルなし
    set nowritebackup
    set nobackup
    set noswapfile
    " 色表示
    set t_Co=256
    colorscheme desert
    syntax on
    " 色設定(行番号)
    highlight LineNr ctermfg=130 ctermbg=234
    " 色設定(変換候補)
    highlight Pmenu ctermbg=16 ctermfg=8 guifg=#000000 guibg=#999999
    highlight PmenuSel ctermbg=blue ctermfg=black
    highlight PmenuSbar ctermbg=0 ctermfg=9
    highlight PmenuSbar ctermbg=255 ctermfg=0 guifg=#000000 guibg=#FFFFFF
    " 色設定(vimdiff)
    hi DiffAdd    ctermfg=black ctermbg=2
    hi DiffChange ctermfg=black ctermbg=3
    hi DiffDelete ctermfg=black ctermbg=6
    hi DiffText   ctermfg=black ctermbg=7
    " 行数表示
    set number
    " 自動改行しない
    set formatoptions=q
    " 折りたたみ設定 (マーカー有効)
    set foldmethod=marker
    " 折りたたみ無効
    set nofoldenable
    " 改行時のコメント挿入を無効化
    autocmd FileType * setlocal formatoptions-=ro
    " タブを半角空白2つにする
    set expandtab
    set tabstop=2
    set shiftwidth=2
    " 自動インデント
    set autoindent
    " vim でタブや全角スペースを表示する
    set list
    set lcs=tab:>.,trail:~,extends:\
    highlight SpecialKey cterm=NONE ctermfg=8 guifg=8
    highlight JpSpace cterm=underline ctermfg=8 guifg=8
    au BufRead,BufNew * match JpSpace /　/
    " 保存時に行末の空白を除去する
    "autocmd BufEnter * autocmd BufWritePre * :%s/\s\+$//ge
    " Markdownの場合は行末の空白を除去しない
    "autocmd BufEnter *.{md,mdwn,mkd,mkdn,mark*} autocmd! BufWritePre *
    " 全角記号を入力しても、ずれないようにする
    set ambiwidth=double
" }

" 検索設定 {
    " 検索の時に大文字小文字を区別しない
    set ignorecase
    " ただし大文字小文字の両方が含まれている場合は大文字小文字を区別する
    set smartcase
    " 検索時にファイルの最後まで行ったら最初に戻る
    set wrapscan
    " インクリメンタルサーチ
    set incsearch
    " 検索文字の強調表示
    set hlsearch
    " grepコマンドでQuickFixを開くように
    autocmd QuickFixCmdPost vimgrep copen
    " vimgrep をデフォルトのgrepとする場合internal
    "set grepprg=internal
    " w,bの移動で認識する文字
    "set iskeyword=a-z,A-Z,48-57,_,.,-,>
" }
